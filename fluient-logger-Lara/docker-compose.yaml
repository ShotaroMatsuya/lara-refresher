version: '3'
services:
  db:
    container_name: mysql
    image: mariadb:latest
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: test
      MYSQL_PASSWORD: test
      MYSQL_DATABASE: testdb
    volumes:
      - db-data:/var/lib/mysql
  app:
    container_name: laravel
    build:
      context: .
      dockerfile: local/Dockerfile.php
    volumes:
      - /var/www/html/vendor
      - /var/www/html/node_modules
      - ./app:/var/www/html:delegated
    depends_on:
      - db
    logging:
      driver: fluentd
      options:
        fluentd-address: 'localhost:24224'
        tag: 'docker.laravel.{{.Name}}'

  web:
    container_name: nginx
    build:
      context: .
      dockerfile: local/Dockerfile.nginx
    ports:
      - 80:80
    volumes:
      - /var/www/html/vendor
      - /var/www/html/node_modules
      - ./web/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./app:/var/www/html
      # ログ(コンテナ内の/var/log/nginxディレクトリをnginxlogとして認識させる)
    depends_on:
      - app
    logging:
      driver: fluentd
      options:
        fluentd-address: 'localhost:24224'
        fluentd-async-connect: 'true'
        tag: 'docker.nginx.{{.Name}}'
  fluentd:
    container_name: fluentd
    build:
      context: ./
      dockerfile: local/Dockerfile.fluentd
    # command: >
    #   /usr/bin/fluentd -c /fluentd/etc/fluent.conf -v
    ports:
      - '24224:24224'
      - '24224:24224/udp'
    volumes:
      - ./fluentd/logs:/fluentd/log
      - ./fluentd/my_fluentd.conf:/fluentd/etc/my_fluentd.conf
      #   nginxのｎログディレクトリをfluentdコンテナからも読めるようにする
    environment:
      FLUENTD_CONF: my_fluentd.conf
      TZ: Asia/Tokyo
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.7.1
    container_name: elasticsearch
    environment:
      - 'discovery.type=single-node'
    ports:
      - '9200:9200'
  kibana:
    build: ./kibana
    ports:
      - '5601:5601'
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
  # composer:
  #   build:
  #     context: ./local
  #     dockerfile: Dockerfile.composer
  #   volumes:
  #     - ./app:/var/www/html
  # artisan:
  #   build:
  #     context: .
  #     dockerfile: local/Dockerfile.php
  #   volumes:
  #     - ./app:/var/www/html
  #   entrypoint: ['php', '/var/www/html/artisan']
  # npm:
  #   image: node:14
  #   working_dir: /var/www/html
  #   entrypoint: ['npm']
  #   volumes:
  #     - ./app:/var/www/html
volumes:
  db-data:
